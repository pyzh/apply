#lang racket
(include "zscheme.rkt")
(include "z.scm")
;---------------------------
(define ($var/k local-state state x k) (k local-state state `(!var ,x)))
(define ($num/k local-state state x k) (k local-state state `(!num ,x)))
(define ($sym/k local-state state x k) (k local-state state `(!sym ,x)))
(define ($char/k local-state state x k) (k local-state state `(!char ,x)))
(define ($str/k local-state state x k) (k local-state state `(!str ,x)))
(define ($$val/k local-state state x k) (k local-state state `((!val ,x))))
(define ($$tail-val/k local-state state x k) (k local-state state `((!tail ,x))))
(define ($$define/k local-state state f x k) (k local-state state `((!def ,f ,x))))
(define $void `!void)
(define $null `!null)
(define ($$if/k local-state state b xs x ys y k) (k local-state state '() `(!if ,b (begin ,@xs ,x) (begin ,@ys y))))
(define ($$if-tail/k local-state state b xs ys k) (k local-state state `((!tail-if ,b ,xs ,ys))))
(define ($$apply/k local-state state f args k) (k local-state state '() `(!app ,f ,@args)))
(define ($$tail-apply/k local-state state f args k) (k local-state state `((!tail-app ,f ,@args))))
(define ($!pre-define-lambda local-state state parm k) (k local-state state))
(define ($!pre-lambda local-state state parm k) (k local-state state))
(define ($$define-lambda/k local-state local-state1 state name parm xs k) (k local-state state `((!def-lam ,name ,parm ,@xs))))
(define ($$lambda/k local-state local-state1 state parm xs k) (k local-state state '() `(!lam ,parm ,@xs)))
(define $null-local-state null-hash)
(define $null-env null-env)
(define $null-state null-hash)
(define ($$top local-state state xs) xs)
(define $arch 'Z)
