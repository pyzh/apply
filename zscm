lambda # (lambda <x> <y>)
cons
%car
%cdr
%pair?
null?
define # (define <SYMBOL> <x>)
%+ : Num -> Num -> Num
%- : Num -> Num -> Num
%* : Num -> Num -> Num
%/ : Num -> Num -> Num
%< : Num -> Num -> Bool
%> : Num -> Num -> Bool
%= : Num -> Num -> Bool
number?（可能是float）
char?
string?
string->list
if : Bool -> Any -> Any -> Any
#t
#f
quote # (quote <SYMBOL>) (quote ())
symbol?
eq?
error
begin
void : -> ...
boolean?
procedure?
apply
raise
with-exception-handler
host-language
<CHAR>
<NUMBER>
<STRING>
